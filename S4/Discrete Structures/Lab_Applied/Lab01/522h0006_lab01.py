# -*- coding: utf-8 -*-
"""522H0006_Lab01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JEaj7xacmT1HQxyYcHg61DodsiKAumxS
"""

#Exercise01

# (a)
a = 15 * 2 + 7 * 8
print("(a) Result:", a)

# (b)
b = 20 - 15 + 15 * 2
print("(b) Result:", b)

# (c)
c = 20 + 30 - 3 * 15 + 5 * 5**2
print("(c) Result:", c)

# (d)
d = (4/6 + 2/6) / (5/2 + 1/2)
print("(d) Result:", d)

# (e)
e = 14/2 + 7
print("(e) Result:", e)

# (f)
f = (5 * 2) / (5 - 20 * 3**2 + 30)
print("(f) Result:", f)

#Exercise02

# (a)
a = 15 * 2 + 7 * 8
print("(a) {}={} ".format("15 * 2 + 7 * 8", a))

# (b)
b = 20 - 15 + 15 * 2
print("(b) {}={} ".format("20 - 15 + 15 * 2", b))

# (c)
c = 20 + 30 - 3 * 15 + 5 * 5**2
print("(c) {}={} ".format("20 + 30 - 3 * 15 + 5 * 5**2", c))

# (d)
d = (4/6 + 2/6) / (5/2 + 1/2)
print("(d) {}={} ".format("4/6 + 2/6) / (5/2 + 1/2)", d))

# (e)
e = 14/2 + 7
print("(e) {}={} ".format("14/2 + 7", e))

# (f)
f = (5 * 2) / (5 - 20 * 3**2 + 30)
print("(f) {}={} ".format("(5 * 2) / (5 - 20 * 3**2 + 30)", f))

#Exercise03

def sumN(n):
    if n >= 0:
        numbers = list(range(n + 1))
        result = "+".join(map(str, numbers))
    else:
        numbers = list(range(0, n - 1, -1))
        result = "+".join(map(str, numbers))

    return "{}={}".format(result, sum(numbers))

# Example usage:
result_positive = sumN(2)
print("sumN_string(2): ", result_positive)

result_negative = sumN(-5)
print("sumN_string(-5): ", result_negative)

#Exercise04

def process_string():
    A = input("Input your string: ")

    # (a) Remove all space (" ")
    B = A.split()
    result_a = "".join(B)
    print("(a) Result:", result_a)

    # (b) Replace all space (" ") with “_”
    result_b = "_".join(B)
    print("(b) Result:", result_b)

# Example usage:
process_string()

#Exercise05

def calculate_operation(input_string):
    # Separating input into three substrings: first number, operator, second number
    parts = input_string.split()
    num1 = int(parts[0])
    operator = parts[1]
    num2 = int(parts[2])

    # Performing the operation based on the operator
    if operator == '+':
        result = num1 + num2
    elif operator == '-':
        result = num1 - num2
    elif operator == '*':
        result = num1 * num2
    elif operator == '/':
        if num2 != 0:
            result = num1 / num2
        else:
            return "Error: Division by zero"
    elif operator == '%':
        result = num1 % num2
    elif operator == '^':
        result = num1 ** num2
    else:
        return "Error: Invalid operator"

    return result

# Example usage:
input_str = input("Input your operation (e.g., 1+2): ")
output_result = calculate_operation(input_str)
print("Output:", output_result)

#Exercise06

def calculate_operation_with_dict(input_string):
    # Separating input into three substrings: first number, operator, second number
    parts = input_string.split()
    num1 = int(parts[0])
    operator = parts[1]
    num2 = int(parts[2])

    # Dictionary mapping operators to functions
    operators_dict = {
        '+': lambda x, y: x + y,
        '-': lambda x, y: x - y,
        '*': lambda x, y: x * y,
        '/': lambda x, y: x / y if y != 0 else "Error: Division by zero",
        '%': lambda x, y: x % y,
        '^': lambda x, y: x ** y,
    }

    # Performing the operation based on the operator using the dictionary
    operation_func = operators_dict.get(operator)
    if operation_func:
        result = operation_func(num1, num2)
    else:
        result = "Error: Invalid operator"

    return result

# Example usage:
input_str = input("Input your operation (e.g., 1+2): ")
output_result = calculate_operation_with_dict(input_str)
print("Output:", output_result)

#Exercise07

def mSum(A, B):
    # Check if the matrices have the same dimensions
    if len(A) != len(B) or len(A[0]) != len(B[0]):
        print("Matrix dimension error")
        return None

    # Initialize the result matrix C with zeros
    C = [[0 for _ in range(len(A[0]))] for _ in range(len(A))]

    # Calculate the summation of matrices A and B
    for i in range(len(A)):
        for j in range(len(A[0])):
            C[i][j] = A[i][j] + B[i][j]

    return C

# Example usage:
A = [[1, 2, 3],
     [4, 5, 6]]
B = [[7, 8, 9],
     [10, 11, 12]]

result = mSum(A, B)

if result is not None:
    print("Resultant Matrix C:")
    for row in result:
        print(row)

#Exercise08

def mProd(A, B):
    # Check if the matrices can be multiplied
    if len(A[0]) != len(B):
        print("Matrix dimension error")
        return None

    # Initialize the result matrix C with zeros
    C = [[0 for _ in range(len(B[0]))] for _ in range(len(A))]

    # Calculate the product of matrices A and B
    for i in range(len(A)):
        for j in range(len(B[0])):
            for k in range(len(B)):
                C[i][j] += A[i][k] * B[k][j]

    return C

# Example usage:
A = [[1, 2],
     [3, 4]]
B = [[5, 6],
     [7, 8]]

result = mProd(A, B)

if result is not None:
    print("Resultant Matrix C:")
    for row in result:
        print(row)

#Exercise09

def ithCombine(p, q):
    result = "if {}, then {}".format(p, q)
    return result

def panqCombine(p, q):
    result = "{} and {} not {}".format(p, q.split()[0], ' '.join(q.split()[1:]))
    return result

def npoqCombine(p, q):
    result = "{} not {}, or {}".format(p.split()[0], ' '.join(p.split()[1:]), q)
    return result

# Example usage:
p = "it sunny"
q = "I go camping"

result_a = ithCombine(p, q)
print("(a)", result_a)

result_b = panqCombine(p, q)
print("(b)", result_b)

result_c = npoqCombine(p, q)
print("(c)", result_c)